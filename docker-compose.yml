name: twitch-micro

services:
  twitch-service:
    build: ./twitch
    container_name: twitch-service
    restart: always
    ports:
      - "9001:9001"
    environment:
      DB_URL: jdbc:postgresql://postgres-twitch:5432/twitch
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - twitch

  keycloak:
    build: ./keycloak
    container_name: keycloak
    restart: always
    ports:
      - "9999:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/twitch
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

      KC_FEATURES: preview
    networks:
      - twitch
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live' ]
      interval: 5s
      timeout: 5s
      retries: 20

  postgres_keycloak:
    container_name: postgres-keycloak
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: twitch
      PGDATA: /data/postgres
    volumes:
      - postgres_keycloak:/data/postgres
    networks:
      - twitch
    ports:
      - "5433:5432"
    restart: unless-stopped

  postgres_twitch:
    container_name: postgres-twitch
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: twitch
      PGDATA: /data/postgres
    volumes:
      - postgres_twitch:/data/postgres
    networks:
      - twitch
    ports:
      - "5434:5432"
    restart: unless-stopped

networks:
  twitch:
    driver: bridge
    name: twitch

volumes:
  postgres_keycloak:
  postgres_twitch: